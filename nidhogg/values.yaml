nidhogg:
  yggdrasil:
    repoURL: "https://github.com/Energinet-DataHub/eo-base-environment.git"
    targetRevision: "production"
    ingressDomain: energioprindelse.dk

  installCNI: false

  argo-cd:
    controller:
      replicas: 3
      env:
        - name: "ARGOCD_CONTROLLER_REPLICAS"
          value: "3"
      enableStatefulSet: true
    redis-ha:
      enabled: true

    redis:
      enabled: false
    server:
      replicas: 3
      extraArgs:
        - --insecure
        - --rootpath
        - /admin/argocd
      config:
        repositories: |
          - type: helm
            url: https://argoproj.github.io/argo-helm
            name: argoproj
          - type: helm
            url: https://distributed-technologies.github.io/helm-repository/
            name: dt-helmrepo
          - type: helm
            url: https://kubernetes.github.io/kube-state-metrics
            name: metrics
          - type: helm
            url: https://prometheus-community.github.io/helm-charts
            name: node-exporter
          - type: helm
            url: https://grafana.github.io/helm-charts
            name: grafana
          - type: helm
            url: https://strimzi.io/charts/
            name: strimzi-kafka-operator
          - type: helm
            url: https://confluentinc.github.io/cp-helm-charts/
            name: cp-helm-charts
          - type: helm
            url: https://charts.bitnami.com/bitnami
            name: bitnami
          - type: helm
            url: https://energinet-datahub.github.io/helm-charts/
            name: energy-origin

        resource.customizations: |
          admissionregistration.k8s.io/MutatingWebhookConfiguration:
            ignoreDifferences: |
              jsonPointers:
              - /webhooks/0/clientConfig/caBundle
          admissionregistration.k8s.io/ValidatingWebhookConfiguration:
            ignoreDifferences: |
              jsonPointers:
              - /webhooks/0/clientConfig/caBundle
              - /webhooks/0/namespaceSelector/matchExpressions/2
          networking.k8s.io/Ingress:
            health.lua: |
              hs = {}
              hs.status = "Healthy"
              return hs
      service:
        # -- Server service type
        type: ClusterIP
