apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: mukube-build-
spec:
  serviceAccountName: workflow
  entrypoint: download-partial-build
  volumes:
  - name: docker
    secret:
      secretName: docker
  templates:
  - name: download-partial-build
    steps:
#    - - name: download-partial
#        template: partial-download
    - - name: helm-commands
        template: helm-nidhogg
      - name: image-requirements
        template: image-req
      - name: helm-requirements
        template: helm-req
      - name: config
        template: config-req
      - name: docker-login
        template: generate-docker-login
    - - name: configure 
        template: configure-tar
        arguments: 
          artifacts: 
          - name: helm
            from: "{{steps.helm-commands.outputs.artifacts.helm}}"
          - name: image-req
            from: "{{steps.image-requirements.outputs.artifacts.image-file}}"
          - name: helm-req
            from: "{{steps.helm-requirements.outputs.artifacts.helm-req}}"
          - name: config
            from: "{{steps.config.outputs.artifacts.config}}"
      - name: build-mukube-container
        template: build-container
        arguments: 
          artifacts: 
          - name: config
            from: "{{steps.docker-login.outputs.artifacts.docker-config}}"
    - - name: build
        template: build-iso
        arguments:
          artifacts:
#          - name: partial-build
#            from: "{{steps.download-partial.outputs.artifacts.partial-build}}"
          - name: master0
            from: "{{steps.configure.outputs.artifacts.master0}}"
#          - name: master1
#            from: "{{steps.configure.outputs.artifacts.master1}}"
#          - name: master2
#            from: "{{steps.configure.outputs.artifacts.master2}}"
#          - name: worker0
#            from: "{{steps.configure.outputs.artifacts.worker0}}"
#          - name: worker1
#            from: "{{steps.configure.outputs.artifacts.worker1}}"
#          - name: worker2
#            from: "{{steps.configure.outputs.artifacts.worker2}}"
#    - - name: deploy
#        template: transfer-iso
#        arguments:
#          artifacts:
#          - name: master0
#            from: "{{steps.build.outputs.artifacts.master0}}"
#          - name: master1
#            from: "{{steps.build.outputs.artifacts.master1}}"
#          - name: master2
#            from: "{{steps.build.outputs.artifacts.master2}}"
#          - name: worker0
#            from: "{{steps.build.outputs.artifacts.worker0}}"
#          - name: worker1
#            from: "{{steps.build.outputs.artifacts.worker1}}"
#          - name: worker2
#            from: "{{steps.build.outputs.artifacts.worker2}}"

#  - name: partial-download
#    container:
#      image: alpine:latest
#      command: [sh, -c]
#      args: ["echo partialDownload >> /tmp/hello_world.txt"]
#    outputs:
#      artifacts:
#      - name: partial-build
#        path: /tmp/hello_world.txt
  
  - name: helm-nidhogg
    container: 
      image: skovbakke/nidhogg:v0.1
    outputs:
      artifacts:
      - name: helm
        path: /apps/nidhogg-v0.1.tgz

  - name: image-req
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo '' | tee /tmp/image_requirements"]
    outputs:
      artifacts:
      - name: image-file
        path: /tmp/image_requirements

  - name: helm-req
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo nidhogg%yggdrasil%file:///mukube-configurator/nidhogg-v0.1.tgz | tee /tmp/helm_requirements"]
    outputs:
      artifacts:
      - name: helm-req
        path: /tmp/helm_requirements

  - name: config-req
    container:
      image: ubuntu:latest
      command: [bash, -c]
      args: ["
echo NODE_CONTROL_PLANE_VIP=192.168.1.30 > /tmp/config;
echo NODE_CONTROL_PLANE_PORT=4200 >> /tmp/config;
echo MASTER_TAINT=false >> /tmp/config;
echo NODE_NETWORK_INTERFACE=eth0 >> /tmp/config;
echo MASTER_VIP_CLUSTER_IPS=192.168.1.31 >> /tmp/config;
echo WORKER_IPS= >> /tmp/config;
echo NODE_GATEWAY_IP=192.168.1.1 >> /tmp/config;
echo CONFIGURE_DNS=true >> /tmp/config;
echo CLUSTER_DNS=192.168.1.29 >> /tmp/config;
echo NODE_JOIN_TOKEN=123 >> /tmp/config;
echo MASTER_CERTIFICATE_KEY=1234 >> /tmp/config;
cat /tmp/config    "]
    outputs:
      artifacts:
      - name: config
        path: /tmp/config 

  - name: generate-docker-login
    container:
      image: ubuntu:latest
      command: [bash, -c]
      args: ['
echo { > /tmp/config.json;
echo         \"auths\": { >> /tmp/config.json;
echo                 \"https://index.docker.io/v1/\": { >> /tmp/config.json;
echo                         \"auth\": \"amVsbGUxMjg6amFsbGUxMjM=\" >> /tmp/config.json;
echo                 } >> /tmp/config.json;
echo         } >> /tmp/config.json;
echo } >> /tmp/config.json;
cat /tmp/config.json']   
    outputs:
      artifacts:
      - name: docker-config
        path: /tmp/config.json

  - name: configure-tar
    inputs: 
      artifacts: 
      - name: helm
        path: /mukube-configurator/nidhogg-v0.1.tgz
      - name: image-req
        path: /mukube-configurator/image_requirements
      - name: helm-req
        path: /mukube-configurator/helm_requirements
      - name: config
        path: /mukube-configurator/config
    container:
      image: skovbakke/mukube-config:v0.2.2
    outputs:
      artifacts:
      - name: master0
        path: /mukube-configurator/artifacts/master0.tar
#      - name: master1
#        path: /tmp/tars/master1.tar
#      - name: master2
#        path: /tmp/tars/master2.tar
#      - name: worker0
#        path: /tmp/tars/worker0.tar
#      - name: worker1
#        path: /tmp/tars/worker1.tar
#      - name: worker2
#        path: /tmp/tars/worker2.tar

  - name: build-container
    inputs: 
      artifacts: 
      - name: config
        path: /kaniko/.docker/config.json
      - name: source
        path: /src
        git: 
          repo: https://github.com/distributed-technologies/mukube.git
          revision: "development"
    container:
      image: gcr.io/kaniko-project/executor:latest
      args: ["--dockerfile=.devcontainer/Dockerfile",
             "--destination=jelle128/energinet:v0.5.0"]
      workingDir: /src
      env:

  - name: build-iso
    inputs:
      artifacts:
#      - name: partial-build
#        path: /tmp/partial-build  
       - name: master0
         path: /workspace/mukube/overlay-artifacts/master0.tar
    container: 
      image: jelle128/energinet:v0.5.0
#    outputs: 
#      artifacts: 
#      - name: master0
#        path: /mukube/output/master0
#      - name: master1
#        path: /mukube/output/master1
#      - name: master2
#        path: /mukube/output/master2
#      - name: worker0
#        path: /mukube/output/worker0
#      - name: worker1
#        path: /mukube/output/worker1
#      - name: worker2
#        path: /mukube/output/worker2

  - name: transfer-iso
#    inputs:
#      artifacts:
#      - name: master0
#        path: /tmp/mukube/input
#      - name: master1
#        path: /tmp/mukube/input
#      - name: master2
#        path: /tmp/mukube/input
#      - name: worker0
#        path: /tmp/mukube/input
#      - name: worker1
#        path: /tmp/mukube/input
#      - name: worker2
#        path: /tmp/mukube/input
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo last container finished"]
